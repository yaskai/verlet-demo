#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include "raylib.h"
#include "raymath.h"
#include "ui.h"

void UiInit(Ui *ui, Rope *rope) {
	ui->slider_count = 4;
	ui->sliders = MemAlloc(sizeof(Slider) * ui->slider_count);

	UiMakeSliders(ui, rope);
}

void UiUpdate(Ui *ui) {
	// Clear flags
	ui->flags = 0;
	
	for(uint8_t i = 0; i < ui->slider_count; i++) {
		SliderUpate(&ui->sliders[i]);

		if(ui->sliders->flags != 0) ui->flags |= UI_FOCUSED;
	}
}

void UiDraw(Ui *ui) {
	DrawRectangleLines(0, 0, 201, 800, LIGHTGRAY);

	for(uint8_t i = 0; i < ui->slider_count; i++) {
		SliderDraw(&ui->sliders[i]);
	}
}

void UiClose(Ui *ui) {
	free(ui->sliders);
}

void UiMakeSliders(Ui *ui, Rope *rope) {
	char *labels[] = { "iterations", "segment length", "dampening", "gravity" };
	float control_bounds[4][2] = { {0, 100}, {1, 10}, {0, 1}, {0, 100} };

	for(uint8_t i = 0; i < ui->slider_count; i++) {
		ui->sliders[i] = (Slider) {
			.flags = 0,
			
			.rec_base = (Rectangle){ .x = 0, .y = (i+1) * 75, .width = 200, .height = 50},
			.rec_ctrl = (Rectangle){ .x = 0, .y = (i+1) * 75, .width =  50, .height = 50},
			
			.control_bounds[0] = control_bounds[i][0],
			.control_bounds[1] = control_bounds[i][1],

			.control = &rope->controls[i],

			.text = labels[i]
		};

		ui->sliders[i].rec_ctrl.x = HandlePosFromVal(&ui->sliders[i]);
	}
}

void SliderUpate(Slider *slider) {
	// Clear state
	slider->flags = 0;

	// Track previous x value
	float x_prev = slider->rec_ctrl.x;

	// Check for hover/press
	if(CheckCollisionPointRec(GetMousePosition(), slider->rec_base)) {
		slider->flags |= SLIDER_BG_HOV;

		Vector2 mouse_delta = GetMouseDelta();
		Rectangle handle_rec = slider->rec_ctrl;
		
		handle_rec.x += mouse_delta.x * 0.5f;
		handle_rec.y += mouse_delta.y * 0.5f;

		handle_rec.width += mouse_delta.x;
		handle_rec.height += mouse_delta.y;
		
		if(CheckCollisionPointRec(GetMousePosition(), handle_rec)) {
			slider->flags |= SLIDER_HOVERED;

			if(IsMouseButtonDown(MOUSE_BUTTON_LEFT))
				slider->flags |= SLIDER_PRESSED;
		}	
	}

	// Update x with press
	if(slider->flags & SLIDER_PRESSED)
		slider->rec_ctrl.x = GetMouseX() - slider->rec_ctrl.width * 0.5f;

	// Clamp x to base in bounds
	slider->rec_ctrl.x = 
		Clamp(slider->rec_ctrl.x, slider->rec_base.x, slider->rec_base.x + slider->rec_base.width - slider->rec_ctrl.width);

	// Update control value if needed
	if(slider->rec_ctrl.x != x_prev) {
		float xrel = slider->rec_ctrl.x - slider->rec_base.x;
		float percent = (xrel / ((slider->rec_base.width) - slider->rec_ctrl.width) * 100);

		slider->percent = percent; 

		float val = ((slider->control_bounds[1] - slider->control_bounds[0]) * percent) / 100;
		val = Clamp(val, slider->control_bounds[0], slider->control_bounds[1]);
		*slider->control = val;
	}
}

void SliderDraw(Slider *slider) {
	DrawRectangleRec(slider->rec_base, DARKGRAY);
	DrawRectangleRec(slider->rec_ctrl, LIGHTGRAY);

	DrawText(TextFormat("%s: %f", slider->text, *slider->control), slider->rec_base.x, slider->rec_base.y - 20, 18, GREEN);
	//DrawText(TextFormat("%f", *slider->control), slider->rec_base.x, slider->rec_base.y + 60, 18, GREEN);
}

float HandlePosFromVal(Slider *slider) {
	float pos;

	float val = *slider->control;
	float percent = (val / (slider->control_bounds[1] - slider->control_bounds[0])) * 100;
	slider->percent = percent;

	float w = (slider->rec_base.width - slider->rec_ctrl.width);
	pos = (slider->rec_base.x + ((w * percent) / 100));

	return pos;
}

